name: Build and Push Docker to EKS

on:
  push:
    branches:
      - dev

jobs:                                            
  build:                                       
    name: Release                                
    runs-on: ubuntu-latest     
    env:
      ENVIRONMENT: dev
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}

    steps:
      - name: Set up environment variables
        id: vars
        run: |
          echo "AWS_EKS_CLUSTER_NAME=${{ env.ENVIRONMENT }}-${{ secrets.AWS_EKS_CLUSTER_NAME }}" >> $GITHUB_ENV
          echo "HELM_RELEASE_NAME=${{ env.ENVIRONMENT }}-lens-view" >> $GITHUB_ENV
          echo "DOCKER_TAG=${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ env.ENVIRONMENT }}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "NODE_ENV=development" >> .env
          echo "ACCESS_TOKEN_PRIVATE_KEY=${{ secrets.ACCESS_TOKEN_PRIVATE_KEY }}" >> .env
          echo "ACCESS_TOKEN_PUBLIC_KEY=A${{ secrets.ACCESS_TOKEN_PUBLIC_KEY }}" >> .env
          echo "REFRESH_PRIVATE_KEY=${{ secrets.REFRESH_PRIVATE_KEY }}" >> .env
          echo "REFRESH_PUBLIC_KEY=${{ secrets.REFRESH_PUBLIC_KEY }}" >> .env
          echo "PORT=3001" >> .env
          POSTGRES_USER=$(echo "${{ secrets.POSTGRES_USER }}" | base64 --decode)
          POSTGRES_PASSWORD=$(echo "${{ secrets.POSTGRES_PASSWORD }}" | base64 --decode)
          echo "DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mydb?schema=public" >> .env

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     registry: docker.io
      #     username: ${{ env.DOCKERHUB_USERNAME }}
      #     password: ${{ env.DOCKERHUB_TOKEN }}

      # - name: Build Docker image
      #   run: |
      #     docker build -t ${{ env.DOCKER_IMAGE }} .

      # - name: Push Docker image
      #   run: |
      #     docker push ${{ env.DOCKER_IMAGE }}

      # - name: Set up AWS CLI
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout Helm chart repository
        uses: actions/checkout@v2
        with:
          repository: DarkMurky/murky-view-infrasturcture

      # - name: Check if s3 bucket exists
      #   working-directory: ./scripts
      #   run: |
      #     chmod +x ./validate_s3_bucket.sh
      #     ./validate_s3_bucket.sh

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
            terraform_version: 1.10.5

      - uses: azure/setup-helm@v4.2.0
        with:
          version: v3.17.0
        id: install_helm

      - uses: azure/setup-kubectl@v4
        with:
          version: v1.32.1
        id: install_kubectl

      # - name: Terraform init and validate
      #   working-directory: ./k8s/terraform
      #   run: |
      #     terraform init -backend-config="key=state/${{ env.ENVIRONMENT }}/terraform.tfstate"

      # - name: Terraform plan
      #   working-directory: ./k8s/terraform
      #   run: |
      #     terraform plan -var="environment=${{ env.ENVIRONMENT }}"

      # - uses: trstringer/manual-approval@v1
      #   with:
      #     secret: ${{ secrets.TOKEN_GITHUB }}
      #     approvers: DarkMurky
      #     minimum-approvals: 1
      #     issue-title: "Deploying to ${{ env.ENVIRONMENT }}"
      #     issue-body: "Review the terraform plan"
      #     exclude-workflow-initiator-as-approver: false

      # - name: Terraform apply
      #   working-directory: ./k8s/terraform
      #   run: |
      #     terraform apply -auto-approve -var="environment=${{ env.ENVIRONMENT }}"

      # - name: Update kubeconfig context
      #   run: |
      #     aws eks update-kubeconfig --name ${{ env.AWS_EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      # - name: Get pods
      #   run: |
      #      kubectl get pods --all-namespaces

      - name: Create secrets file
        working-directory: ./k8s/murky-view-chart
        run: |
          echo "db-user: ${{ secrets.DATABASE_USER}}" > secrets
          echo "db-pass: ${{ secrets.DATABASE_PASSWORD }}" >> secrets

      - name: Print dir
        working-directory: ./k8s/murky-view-chart
        run: |
          echo "LS:"
          ls -l

      - name: Print secrets file
        working-directory: ./k8s/murky-view-chart
        run: |
          echo "LS:"
          cat secrets

      # - name: Deploy with Helm
      #   run: |
      #     kubectl get ns ${{ env.ENVIRONMENT }} || kubectl create ns ${{ env.ENVIRONMENT }}
      #     helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ./k8s/murky-view-chart -f ./k8s/murky-view-chart/values-${{ env.ENVIRONMENT }}.yml
